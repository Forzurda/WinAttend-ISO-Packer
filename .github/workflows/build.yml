name: Build & Release (ps2exe / PowerShell)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release tag (e.g. v1.2.3)"
        required: true
        type: string
      prerelease:
        description: "Mark as pre-release?"
        required: false
        default: false
        type: boolean
      notes:
        description: "Release notes (Markdown)"
        required: false
        type: string

permissions:
  contents: write

env:
  SCRIPT_PATH: WinAttend-ISO-Packer.ps1
  APP_TITLE: WinAttend ISO Packer
  APP_NAME: WinAttend ISO Packer
  ICON_PATH: Icon.ico              
  DIST_DIR: dist

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Prepare PowerShell & ps2exe
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module ps2exe -Scope CurrentUser -Force -AllowClobber

      - name: Resolve version (from input or tag) and normalize
        id: meta
        shell: pwsh
        run: |
          $raw = "${{ inputs.version }}"
          if ([string]::IsNullOrWhiteSpace($raw)) { $raw = "${{ github.ref_name }}" }
          $display = $raw
          $semver = $raw.TrimStart('v')
          $core = $semver.Split('+')[0].Split('-')[0]
          $parts = $core.Split('.')
          while ($parts.Count -lt 4) { $parts += '0' }
          $fileVersion = ($parts[0..3] -join '.')
          "version_display=$display" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "version_semver=$semver"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "file_version=$fileVersion"| Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Build EXE with ps2exe (with icon)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "${{ env.DIST_DIR }}" | Out-Null
          $outFile = Join-Path "${{ env.DIST_DIR }}" "${{ env.APP_NAME }}.exe"
          $icon = Resolve-Path ".\${{ env.ICON_PATH }}" -ErrorAction SilentlyContinue
          if (-not $icon) {
            throw "Icon not found at .\${{ env.ICON_PATH }}. Add a .ico file or update ICON_PATH."
          }

          ps2exe `
            -inputFile ".\${{ env.SCRIPT_PATH }}" `
            -outputFile $outFile `
            -x64 `
            -STA `
            -title "${{ env.APP_TITLE }}" `
            -version "${{ steps.meta.outputs.file_version }}" `
            -iconFile $icon `
            -requireAdmin

      - name: List build outputs
        shell: pwsh
        run: Get-ChildItem -Recurse -File "${{ env.DIST_DIR }}"

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ inputs.version || github.ref_name }}
          name: ${{ env.APP_NAME }} ${{ steps.meta.outputs.version_display }}
          body: ${{ inputs.notes }}
          prerelease: ${{ inputs.prerelease }}
          artifacts: "${{ env.DIST_DIR }}/*.exe"
          artifactErrorsFailBuild: true
